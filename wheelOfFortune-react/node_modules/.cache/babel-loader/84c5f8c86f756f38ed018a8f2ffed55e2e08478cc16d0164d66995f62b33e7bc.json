{"ast":null,"code":"var _jsxFileName = \"/Users/daikexin/Desktop/react-intro/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputValueFromForm, setInputValueFromForm] = useState('');\n  const [info, setInfo] = useState('');\n  const [hiddenPhrase, setHiddenPhrase] = useState('');\n  const phrase = \"hello world\";\n  const handleFormSubmit = value => {\n    // Receive the input value from MyForm and set it in App's state\n    setInputValueFromForm(value);\n  };\n  const getHiddenPhrase = phrase => {\n    let hiddenPhrase = '';\n    for (let i = 0; i < phrase.length; i++) {\n      if (/[a-zA-Z]/.test(phrase[i])) {\n        hiddenPhrase += '*';\n      } else {\n        hiddenPhrase += phrase[i];\n      }\n    }\n  };\n  const inialize = () => {\n    setHiddenPhrase(getHiddenPhrase(phrase));\n  };\n  // Use the useEffect hook to call the function each time the component re-renders\n  useEffect(() => {\n    inialize(); // Call the function\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"wheelOfFortune.png\",\n      alt: \"Top Image\",\n      style: {\n        height: '300px',\n        width: '900px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"WheelOfFortune\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"hiddenPhrase\", hiddenPhrase]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Input value from MyForm: \", inputValueFromForm]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: info\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PWqD/25ZEUHHcOTC8YCBnPOWdss=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","logo","Form","jsxDEV","_jsxDEV","App","_s","inputValueFromForm","setInputValueFromForm","info","setInfo","hiddenPhrase","setHiddenPhrase","phrase","handleFormSubmit","value","getHiddenPhrase","i","length","test","inialize","className","children","src","alt","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["/Users/daikexin/Desktop/react-intro/src/App.js"],"sourcesContent":["import React, { useState,useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './Form'\n\nfunction App() {\n  const [inputValueFromForm, setInputValueFromForm] = useState('');\n  const [info,setInfo] = useState('');\n  const[hiddenPhrase,setHiddenPhrase] = useState('');\n  const phrase = \"hello world\"\n\n  const handleFormSubmit = (value) => {\n    // Receive the input value from MyForm and set it in App's state\n    setInputValueFromForm(value);\n  };\n  const getHiddenPhrase = (phrase) => {\n    let hiddenPhrase = '';\n  \n    for (let i = 0; i < phrase.length; i++) {\n      if (/[a-zA-Z]/.test(phrase[i])) {\n        hiddenPhrase += '*';\n      } else {\n        hiddenPhrase += phrase[i];\n      }\n    }\n  }\n  const inialize = () => {\n      setHiddenPhrase(getHiddenPhrase(phrase));\n    \n  }\n    // Use the useEffect hook to call the function each time the component re-renders\n    useEffect(() => {\n      inialize(); // Call the function\n    }, []); \n  return (\n    <div className=\"App\">\n      <img\n      src=\"wheelOfFortune.png\"\n      alt=\"Top Image\"\n      style={{\n        height:'300px',\n        width:'900px'\n      }}\n    />\n      <h1>WheelOfFortune</h1>\n      <div>hiddenPhrase{hiddenPhrase}</div>\n      <div className=\"form-container\">\n        <Form onSubmit={handleFormSubmit}/>\n        <p>Input value from MyForm: {inputValueFromForm}</p>\n        <h2>{info}</h2>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}