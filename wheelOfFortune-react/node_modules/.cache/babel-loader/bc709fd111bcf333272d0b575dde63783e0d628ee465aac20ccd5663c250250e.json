{"ast":null,"code":"var _jsxFileName = \"/Users/daikexin/Desktop/react-intro/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputValueFromForm, setInputValueFromForm] = useState('');\n  const [info, setInfo] = useState('');\n  const [hiddenPhrase, setHiddenPhrase] = useState('');\n  const phrases = ['Hello World', 'Happy coding', 'React is awesome', 'JavaScript rocks', 'Web development'];\n  const getRandomPhrase = () => {\n    const randomIndex = Math.floor(Math.random() * phrases.length);\n    return phrases[randomIndex];\n  };\n  const handleFormSubmit = value => {\n    // Receive the input value from MyForm and set it in App's state\n\n    setInputValueFromForm(value);\n    processGuess(value);\n  };\n  const getHiddenPhrase = phrase => {\n    let hiddenPhrase = '';\n    for (let i = 0; i < phrase.length; i++) {\n      if (/[a-zA-Z]/.test(phrase[i])) {\n        hiddenPhrase += '*';\n      } else {\n        hiddenPhrase += phrase[i];\n      }\n    }\n    return hiddenPhrase;\n  };\n  const [phrase, setPhrase] = useState(getRandomPhrase());\n  const processGuess = ch => {\n    const newHiddenPhrase = [...hiddenPhrase];\n    const normalizedCh = ch.toLowerCase();\n    if (/^[a-zA-Z]$/.test(ch)) {\n      let flag = false;\n      for (let i = 0; i < phrase.length; ++i) {\n        const letter = phrase[i].toLowerCase();\n        if (letter === normalizedCh) {\n          flag = true;\n          newHiddenPhrase[i] = phrase[i];\n          setHiddenPhrase(newHiddenPhrase);\n        }\n        console.log(i, \"phrase\", phrase, \"hidden\", hiddenPhrase);\n      }\n      if (!flag) {\n        setInfo(\"It's wrong! Input again!\");\n      } else {\n        setInfo(\"It's right. Input next guess\");\n      }\n    } else {\n      setInfo(\"It is not a letter!!!\");\n    }\n    if (newHiddenPhrase.join('') === phrase) {\n      setInfo(\"Congratulations!\");\n    }\n  };\n  // Use the useEffect hook to call the function each time the component re-renders\n  useEffect(() => {\n    console.log(phrase);\n    setPhrase(getRandomPhrase());\n    setInfo(\"\");\n    setHiddenPhrase(getHiddenPhrase(phrase));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"wheelOfFortune.png\",\n      alt: \"Top Image\",\n      style: {\n        height: '300px',\n        width: '900px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '60px',\n        marginTop: '40px'\n      },\n      children: hiddenPhrase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: info\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mwL9ZJaqabbVHNTpDWxAB+vw3CA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Form","jsxDEV","_jsxDEV","App","_s","inputValueFromForm","setInputValueFromForm","info","setInfo","hiddenPhrase","setHiddenPhrase","phrases","getRandomPhrase","randomIndex","Math","floor","random","length","handleFormSubmit","value","processGuess","getHiddenPhrase","phrase","i","test","setPhrase","ch","newHiddenPhrase","normalizedCh","toLowerCase","flag","letter","console","log","join","className","children","src","alt","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","marginTop","onSubmit","_c","$RefreshReg$"],"sources":["/Users/daikexin/Desktop/react-intro/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './Form'\n\nfunction App() {\n  const [inputValueFromForm, setInputValueFromForm] = useState('');\n  const [info, setInfo] = useState('');\n  const [hiddenPhrase, setHiddenPhrase] = useState('');\n\n\n  const phrases = [\n    'Hello World',\n    'Happy coding',\n    'React is awesome',\n    'JavaScript rocks',\n    'Web development',\n  ];\n  const getRandomPhrase = () => {\n    const randomIndex = Math.floor(Math.random() * phrases.length);\n    return phrases[randomIndex];\n  };\n\n  const handleFormSubmit = (value) => {\n    // Receive the input value from MyForm and set it in App's state\n\n    setInputValueFromForm(value);\n    processGuess(value)\n  };\n\n  const getHiddenPhrase = (phrase) => {\n    let hiddenPhrase = '';\n\n    for (let i = 0; i < phrase.length; i++) {\n      if (/[a-zA-Z]/.test(phrase[i])) {\n        hiddenPhrase += '*';\n      } else {\n        hiddenPhrase += phrase[i];\n      }\n    }\n    return hiddenPhrase;\n  }\n  const [phrase, setPhrase] = useState(getRandomPhrase());\n  const processGuess = (ch) => {\n    const newHiddenPhrase = [...hiddenPhrase];\n    const normalizedCh = ch.toLowerCase();\n\n    if (/^[a-zA-Z]$/.test(ch)) {\n      let flag = false;\n\n      for (let i = 0; i < phrase.length; ++i) {\n        const letter = phrase[i].toLowerCase();\n        if (letter === normalizedCh) {\n          flag = true;\n          newHiddenPhrase[i] = phrase[i];\n          setHiddenPhrase(newHiddenPhrase);\n        }\n        console.log(i, \"phrase\", phrase, \"hidden\", hiddenPhrase)\n      }\n\n      if (!flag) {\n        setInfo(\"It's wrong! Input again!\")\n      } else {\n        setInfo(\"It's right. Input next guess\")\n      }\n    } else {\n      setInfo(\"It is not a letter!!!\")\n    }\n    if (newHiddenPhrase.join('') === phrase) {\n      setInfo(\"Congratulations!\");\n    }\n  }\n    // Use the useEffect hook to call the function each time the component re-renders\n    useEffect(() => {\n      console.log(phrase)\n      setPhrase(getRandomPhrase());\n      setInfo(\"\")\n      setHiddenPhrase(getHiddenPhrase(phrase));\n    }, []);\n\n\n  return (\n    <div className=\"App\">\n      <img\n        src=\"wheelOfFortune.png\"\n        alt=\"Top Image\"\n        style={{\n          height: '300px',\n          width: '900px'\n        }}\n      />\n      <div style={{\n        fontSize: '60px',\n        marginTop: '40px'\n      }}>{hiddenPhrase}</div>\n      <div className=\"form-container\">\n        <Form onSubmit={handleFormSubmit} />\n        <h1>{info}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}